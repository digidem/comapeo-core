#!/usr/bin/env node

// TODO: move to its own package? Based on https://github.com/wooorm/iso-639-3
// but we don't need all the data included in that package (language names etc,
// which adds a lot to the bundle size)

import assert from 'node:assert/strict'
import fs from 'node:fs/promises'

import { tsvParse } from 'd3-dsv'

const OUTPUT_DIR_URL = new URL('../src/generated/', import.meta.url)
// Source: https://iso639-3.sil.org/code_tables/download_tables
const ISO6393_CORE_SET_URL =
  'https://iso639-3.sil.org/sites/iso639-3/files/downloads/iso-639-3.tab'

const response = await fetch(ISO6393_CORE_SET_URL)
if (!response.ok) {
  throw new Error(
    `Failed to fetch ISO 639-3 data: ${response.status} ${response.statusText}`
  )
}
const tsvText = await response.text()
const data = extractIso6391And6393(tsvParse(tsvText))

await fs.mkdir(OUTPUT_DIR_URL, { recursive: true })
await fs.writeFile(
  new URL('iso6393.js', OUTPUT_DIR_URL),
  `/**
 * This file is auto-generated by scripts/build-iso6393.mjs
 * Do not edit this file directly.
 */
export const iso6393 = new Set(${JSON.stringify(
    data.map((d) => d.iso6393),
    null,
    2
  )})
`
)
await fs.writeFile(
  new URL('iso6391-to-6393.js', OUTPUT_DIR_URL),
  `/**
  * This file is auto-generated by scripts/build-iso6393.mjs
  * Do not edit this file directly.
  */
export const iso6391To6393 = new Map(${JSON.stringify(
    data.filter((d) => d.iso6391).map((d) => [d.iso6391, d.iso6393]),
    null,
    2
  )})
`
)

/**
 *
 * @param {Array<unknown>} data
 * @returns {Array<{iso6393: string, iso6391?: string}>}
 */
function extractIso6391And6393(data) {
  return data.map((d) => {
    assert(typeof d === 'object' && d !== null, 'Data row is not an object')
    assert('Id' in d && typeof d.Id === 'string', 'Missing Id field')
    return {
      iso6393: d.Id.toLowerCase(),
      iso6391:
        'Part1' in d && typeof d.Part1 === 'string' && d.Part1.trim()
          ? d.Part1.toLowerCase()
          : undefined,
    }
  })
}
