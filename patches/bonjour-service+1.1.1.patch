diff --git a/node_modules/bonjour-service/dist/index.d.ts b/node_modules/bonjour-service/dist/index.d.ts
index a345f1f..7a44afa 100644
--- a/node_modules/bonjour-service/dist/index.d.ts
+++ b/node_modules/bonjour-service/dist/index.d.ts
@@ -8,7 +8,7 @@ export declare class Bonjour {
     unpublishAll(callback?: CallableFunction | undefined): void;
     find(opts?: BrowserConfig | undefined, onup?: (service: Service) => void): Browser;
     findOne(opts?: BrowserConfig | undefined, timeout?: number, callback?: CallableFunction): Browser;
-    destroy(): void;
+    destroy(callback?: CallableFunction): void;
 }
 export { Service, ServiceReferer, ServiceConfig, Browser, BrowserConfig };
 export default Bonjour;
diff --git a/node_modules/bonjour-service/dist/index.js b/node_modules/bonjour-service/dist/index.js
index 2369679..e868386 100644
--- a/node_modules/bonjour-service/dist/index.js
+++ b/node_modules/bonjour-service/dist/index.js
@@ -41,9 +41,9 @@ class Bonjour {
         }, timeout);
         return browser;
     }
-    destroy() {
+    destroy(callback) {
         this.registry.destroy();
-        this.server.mdns.destroy();
+        this.server.mdns.destroy(callback);
     }
 }
 exports.Bonjour = Bonjour;
diff --git a/node_modules/bonjour-service/dist/lib/registry.js b/node_modules/bonjour-service/dist/lib/registry.js
index 22d6f82..09f2fea 100644
--- a/node_modules/bonjour-service/dist/lib/registry.js
+++ b/node_modules/bonjour-service/dist/lib/registry.js
@@ -9,6 +9,7 @@ const dns_equal_1 = __importDefault(require("dns-equal"));
 const service_1 = __importDefault(require("./service"));
 const REANNOUNCE_MAX_MS = 60 * 60 * 1000;
 const REANNOUNCE_FACTOR = 3;
+const noop = function () {}
 class Registry {
     constructor(server) {
         this.services = [];
@@ -26,7 +27,7 @@ class Registry {
                 registry.probe(registry.server.mdns, service, (exists) => {
                     if (exists) {
                         service.stop();
-                        console.log(new Error('Service name is already in use on the network'));
+                        console.log(service, new Error('Service name is already in use on the network'));
                         return;
                     }
                     registry.announce(registry.server, service);
@@ -37,19 +38,20 @@ class Registry {
             }
         }
         function stop(service, registry, callback) {
+            if (!callback) callback = noop
             if (!service.activated)
-                return;
+                return process.nextTick(callback);
             if (!(service instanceof service_1.default))
-                return;
+                return process.nextTick(callback);
             registry.teardown(registry.server, service, callback);
             const index = registry.services.indexOf(service);
             if (index !== -1)
                 registry.services.splice(index, 1);
         }
         const service = new service_1.default(config);
-        service.start = start.bind(null, service, this);
+        service.start = start.bind(null, service, this, { probe: config.probe !== false });
         service.stop = stop.bind(null, service, this);
-        service.start({ probe: config.probe !== false });
+        service.start();
         return service;
     }
     unpublishAll(callback) {
@@ -123,7 +125,7 @@ class Registry {
             return records;
         }), 1);
         if (records.length === 0)
-            return callback && callback();
+            return callback && process.nextTick(callback);
         server.unregister(records);
         server.mdns.respond(records, function () {
             services.forEach(function (service) {
diff --git a/node_modules/bonjour-service/dist/lib/service.d.ts b/node_modules/bonjour-service/dist/lib/service.d.ts
index c4deebc..ab769f1 100644
--- a/node_modules/bonjour-service/dist/lib/service.d.ts
+++ b/node_modules/bonjour-service/dist/lib/service.d.ts
@@ -11,6 +11,7 @@ export interface ServiceConfig {
     subtypes?: Array<string>;
     txt?: KeyValue;
     probe?: boolean;
+    disableIpv6?: boolean;
 }
 export interface ServiceRecord {
     name: string;
diff --git a/node_modules/bonjour-service/dist/lib/service.js b/node_modules/bonjour-service/dist/lib/service.js
index 16b3526..3565973 100644
--- a/node_modules/bonjour-service/dist/lib/service.js
+++ b/node_modules/bonjour-service/dist/lib/service.js
@@ -31,6 +31,7 @@ class Service extends events_1.EventEmitter {
         this.fqdn = `${this.name}.${this.type}${TLD}`;
         this.txt = config.txt;
         this.subtypes = config.subtypes;
+        this.disableIpv6 = !!config.disableIpv6
     }
     records() {
         var records = [this.RecordPTR(this), this.RecordSRV(this), this.RecordTXT(this)];
@@ -48,6 +49,7 @@ class Service extends events_1.EventEmitter {
                         records.push(this.RecordA(this, addr.address));
                         break;
                     case 'IPv6':
+                        if (this.disableIpv6) break;
                         records.push(this.RecordAAAA(this, addr.address));
                         break;
                 }
